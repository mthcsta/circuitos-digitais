// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/26/2021 19:25:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          neander_datapath
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module neander_datapath_vlg_vec_tst();
// constants                                           
// general purpose registers
reg cargaAC;
reg cargaNZ;
reg cargaPC;
reg cargaRDMr;
reg cargaRDMw;
reg cargaREM;
reg cargaRI;
reg CLK;
reg incPC;
reg [0:2] OP;
reg [7:0] read;
reg selMUX16x8;
// wires                                               
wire [7:0] dataAC;
wire [0:7] dataPC;
wire [7:0] dataRDMr;
wire [7:0] dataREM;
wire [7:0] dataRI;
wire N;
wire [7:0] write;
wire Z;

// assign statements (if any)                          
neander_datapath i1 (
// port map - connection between master ports and signals/registers   
	.cargaAC(cargaAC),
	.cargaNZ(cargaNZ),
	.cargaPC(cargaPC),
	.cargaRDMr(cargaRDMr),
	.cargaRDMw(cargaRDMw),
	.cargaREM(cargaREM),
	.cargaRI(cargaRI),
	.CLK(CLK),
	.dataAC(dataAC),
	.dataPC(dataPC),
	.dataRDMr(dataRDMr),
	.dataREM(dataREM),
	.dataRI(dataRI),
	.incPC(incPC),
	.N(N),
	.OP(OP),
	.read(read),
	.selMUX16x8(selMUX16x8),
	.write(write),
	.Z(Z)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// OP[ 2 ]
initial
begin
	OP[2] = 1'b0;
	OP[2] = #80000 1'b1;
	OP[2] = #80000 1'b0;
end 
// OP[ 1 ]
initial
begin
	OP[1] = 1'b0;
end 
// OP[ 0 ]
initial
begin
	OP[0] = 1'b0;
end 
// read[ 7 ]
initial
begin
	read[7] = 1'b0;
	read[7] = #230000 1'b1;
end 
// read[ 6 ]
initial
begin
	read[6] = 1'b0;
	read[6] = #230000 1'b1;
end 
// read[ 5 ]
initial
begin
	read[5] = 1'b1;
end 
// read[ 4 ]
initial
begin
	read[4] = 1'b1;
end 
// read[ 3 ]
initial
begin
	read[3] = 1'b0;
	read[3] = #230000 1'b1;
end 
// read[ 2 ]
initial
begin
	read[2] = 1'b0;
	read[2] = #230000 1'b1;
end 
// read[ 1 ]
initial
begin
	read[1] = 1'b0;
	read[1] = #230000 1'b1;
end 
// read[ 0 ]
initial
begin
	read[0] = 1'b0;
	read[0] = #230000 1'b1;
end 

// incPC
initial
begin
	incPC = 1'b0;
	incPC = #20000 1'b1;
	incPC = #20000 1'b0;
	incPC = #40000 1'b1;
	incPC = #20000 1'b0;
	incPC = #140000 1'b1;
	incPC = #30000 1'b0;
end 

// cargaPC
initial
begin
	cargaPC = 1'b0;
	cargaPC = #240000 1'b1;
	cargaPC = #30000 1'b0;
end 

// selMUX16x8
initial
begin
	selMUX16x8 = 1'b0;
	selMUX16x8 = #100000 1'b1;
	selMUX16x8 = #20000 1'b0;
	selMUX16x8 = #120000 1'b1;
	selMUX16x8 = #30000 1'b0;
end 

// cargaREM
initial
begin
	cargaREM = 1'b1;
	cargaREM = #20000 1'b0;
	cargaREM = #40000 1'b1;
	cargaREM = #20000 1'b0;
	cargaREM = #20000 1'b1;
	cargaREM = #20000 1'b0;
	cargaREM = #120000 1'b1;
	cargaREM = #30000 1'b0;
end 

// cargaRDMr
initial
begin
	cargaRDMr = 1'b0;
	cargaRDMr = #20000 1'b1;
	cargaRDMr = #20000 1'b0;
	cargaRDMr = #40000 1'b1;
	cargaRDMr = #20000 1'b0;
	cargaRDMr = #20000 1'b1;
	cargaRDMr = #20000 1'b0;
	cargaRDMr = #100000 1'b1;
	cargaRDMr = #30000 1'b0;
end 

// cargaRDMw
initial
begin
	cargaRDMw = 1'b0;
	cargaRDMw = #240000 1'b1;
	cargaRDMw = #30000 1'b0;
end 

// cargaAC
initial
begin
	cargaAC = 1'b0;
	cargaAC = #140000 1'b1;
	cargaAC = #20000 1'b0;
	cargaAC = #80000 1'b1;
	cargaAC = #30000 1'b0;
end 

// cargaNZ
initial
begin
	cargaNZ = 1'b0;
	cargaNZ = #140000 1'b1;
	cargaNZ = #20000 1'b0;
	cargaNZ = #80000 1'b1;
	cargaNZ = #30000 1'b0;
end 

// cargaRI
initial
begin
	cargaRI = 1'b0;
	cargaRI = #40000 1'b1;
	cargaRI = #20000 1'b0;
	cargaRI = #180000 1'b1;
	cargaRI = #30000 1'b0;
end 
endmodule

