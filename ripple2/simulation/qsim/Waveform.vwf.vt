// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/22/2021 20:31:08"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ripple2
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ripple2_vlg_vec_tst();
// constants                                           
// general purpose registers
reg C_in;
reg [0:7] X;
reg [0:7] Y;
// wires                                               
wire s0;
wire s1;
wire s2;
wire s3;
wire s4;
wire s5;
wire s6;
wire s7;
wire s8;

// assign statements (if any)                          
ripple2 i1 (
// port map - connection between master ports and signals/registers   
	.C_in(C_in),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.s3(s3),
	.s4(s4),
	.s5(s5),
	.s6(s6),
	.s7(s7),
	.s8(s8),
	.X(X),
	.Y(Y)
);
initial 
begin 
#1000000 $finish;
end 
// X[ 7 ]
initial
begin
	X[7] = 1'b0;
	X[7] = #20810 1'b1;
	X[7] = #41620 1'b0;
	X[7] = #10405 1'b1;
	# 10405;
	repeat(44)
	begin
		X[7] = 1'b0;
		X[7] = #10405 1'b1;
		# 10405;
	end
	X[7] = 1'b0;
end 
// X[ 6 ]
initial
begin
	X[6] = 1'b0;
	X[6] = #20810 1'b1;
	X[6] = #41620 1'b0;
	X[6] = #10405 1'b1;
	# 10405;
	repeat(44)
	begin
		X[6] = 1'b0;
		X[6] = #10405 1'b1;
		# 10405;
	end
	X[6] = 1'b0;
end 
// X[ 5 ]
initial
begin
	X[5] = 1'b0;
	X[5] = #20810 1'b1;
	X[5] = #41620 1'b0;
	X[5] = #10405 1'b1;
	# 10405;
	repeat(44)
	begin
		X[5] = 1'b0;
		X[5] = #10405 1'b1;
		# 10405;
	end
	X[5] = 1'b0;
end 
// X[ 4 ]
initial
begin
	X[4] = 1'b0;
	X[4] = #20810 1'b1;
	X[4] = #41620 1'b0;
	X[4] = #10405 1'b1;
	# 10405;
	repeat(44)
	begin
		X[4] = 1'b0;
		X[4] = #10405 1'b1;
		# 10405;
	end
	X[4] = 1'b0;
end 
// X[ 3 ]
initial
begin
	X[3] = 1'b0;
	X[3] = #41620 1'b1;
	X[3] = #20810 1'b0;
	X[3] = #10405 1'b1;
	# 10405;
	repeat(44)
	begin
		X[3] = 1'b0;
		X[3] = #10405 1'b1;
		# 10405;
	end
	X[3] = 1'b0;
end 
// X[ 2 ]
initial
begin
	X[2] = 1'b0;
	X[2] = #41620 1'b1;
	X[2] = #20810 1'b0;
	X[2] = #10405 1'b1;
	# 10405;
	repeat(44)
	begin
		X[2] = 1'b0;
		X[2] = #10405 1'b1;
		# 10405;
	end
	X[2] = 1'b0;
end 
// X[ 1 ]
initial
begin
	X[1] = 1'b0;
	X[1] = #41620 1'b1;
	X[1] = #20810 1'b0;
	X[1] = #10405 1'b1;
	# 10405;
	repeat(44)
	begin
		X[1] = 1'b0;
		X[1] = #10405 1'b1;
		# 10405;
	end
	X[1] = 1'b0;
end 
// X[ 0 ]
initial
begin
	X[0] = 1'b0;
	X[0] = #41620 1'b1;
	X[0] = #20810 1'b0;
	X[0] = #10405 1'b1;
	# 10405;
	repeat(44)
	begin
		X[0] = 1'b0;
		X[0] = #10405 1'b1;
		# 10405;
	end
	X[0] = 1'b0;
end 
// Y[ 7 ]
initial
begin
	Y[7] = 1'b0;
	Y[7] = #41620 1'b1;
	Y[7] = #20810 1'b0;
	Y[7] = #10405 1'b1;
	# 10405;
	repeat(44)
	begin
		Y[7] = 1'b0;
		Y[7] = #10405 1'b1;
		# 10405;
	end
	Y[7] = 1'b0;
end 
// Y[ 6 ]
initial
begin
	Y[6] = 1'b0;
	Y[6] = #72835 1'b1;
	# 10405;
	repeat(44)
	begin
		Y[6] = 1'b0;
		Y[6] = #10405 1'b1;
		# 10405;
	end
	Y[6] = 1'b0;
end 
// Y[ 5 ]
initial
begin
	Y[5] = 1'b0;
	Y[5] = #72835 1'b1;
	# 10405;
	repeat(44)
	begin
		Y[5] = 1'b0;
		Y[5] = #10405 1'b1;
		# 10405;
	end
	Y[5] = 1'b0;
end 
// Y[ 4 ]
initial
begin
	Y[4] = 1'b0;
	Y[4] = #72835 1'b1;
	# 10405;
	repeat(44)
	begin
		Y[4] = 1'b0;
		Y[4] = #10405 1'b1;
		# 10405;
	end
	Y[4] = 1'b0;
end 
// Y[ 3 ]
initial
begin
	Y[3] = 1'b0;
	Y[3] = #20810 1'b1;
	Y[3] = #20810 1'b0;
	Y[3] = #31215 1'b1;
	# 10405;
	repeat(44)
	begin
		Y[3] = 1'b0;
		Y[3] = #10405 1'b1;
		# 10405;
	end
	Y[3] = 1'b0;
end 
// Y[ 2 ]
initial
begin
	Y[2] = 1'b0;
	Y[2] = #20810 1'b1;
	Y[2] = #20810 1'b0;
	Y[2] = #31215 1'b1;
	# 10405;
	repeat(44)
	begin
		Y[2] = 1'b0;
		Y[2] = #10405 1'b1;
		# 10405;
	end
	Y[2] = 1'b0;
end 
// Y[ 1 ]
initial
begin
	Y[1] = 1'b0;
	Y[1] = #20810 1'b1;
	Y[1] = #20810 1'b0;
	Y[1] = #31215 1'b1;
	# 10405;
	repeat(44)
	begin
		Y[1] = 1'b0;
		Y[1] = #10405 1'b1;
		# 10405;
	end
	Y[1] = 1'b0;
end 
// Y[ 0 ]
initial
begin
	Y[0] = 1'b0;
	Y[0] = #20810 1'b1;
	Y[0] = #20810 1'b0;
	Y[0] = #31215 1'b1;
	# 10405;
	repeat(44)
	begin
		Y[0] = 1'b0;
		Y[0] = #10405 1'b1;
		# 10405;
	end
	Y[0] = 1'b0;
end 

// C_in
initial
begin
	repeat(48)
	begin
		C_in = 1'b0;
		C_in = #10400 1'b1;
		# 10400;
	end
	C_in = 1'b0;
end 
endmodule

