// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/21/2021 02:53:06"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          unidade_de_controle_neander
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module unidade_de_controle_neander_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg count;
reg [3:0] INSTRUCAO;
reg sinalN;
reg sinalZ;
// wires                                               
wire cargaAC;
wire cargaNZ;
wire cargaPC;
wire cargaRDM;
wire cargaREM;
wire cargaRI;
wire gotot0;
wire HALT;
wire incPC;
wire Read;
wire sel;
wire ULA_ADD;
wire ULA_AND;
wire ULA_NOT;
wire ULA_OR;
wire ULA_Y;
wire Write;

// assign statements (if any)                          
unidade_de_controle_neander i1 (
// port map - connection between master ports and signals/registers   
	.cargaAC(cargaAC),
	.cargaNZ(cargaNZ),
	.cargaPC(cargaPC),
	.cargaRDM(cargaRDM),
	.cargaREM(cargaREM),
	.cargaRI(cargaRI),
	.CLK(CLK),
	.count(count),
	.gotot0(gotot0),
	.HALT(HALT),
	.incPC(incPC),
	.INSTRUCAO(INSTRUCAO),
	.Read(Read),
	.sel(sel),
	.sinalN(sinalN),
	.sinalZ(sinalZ),
	.ULA_ADD(ULA_ADD),
	.ULA_AND(ULA_AND),
	.ULA_NOT(ULA_NOT),
	.ULA_OR(ULA_OR),
	.ULA_Y(ULA_Y),
	.Write(Write)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// count
initial
begin
	count = 1'b1;
end 
// INSTRUCAO[ 3 ]
initial
begin
	INSTRUCAO[3] = 1'b0;
	INSTRUCAO[3] = #480000 1'b1;
end 
// INSTRUCAO[ 2 ]
initial
begin
	INSTRUCAO[2] = 1'b0;
	INSTRUCAO[2] = #240000 1'b1;
	INSTRUCAO[2] = #240000 1'b0;
	INSTRUCAO[2] = #400000 1'b1;
end 
// INSTRUCAO[ 1 ]
initial
begin
	INSTRUCAO[1] = 1'b0;
	INSTRUCAO[1] = #80000 1'b1;
	INSTRUCAO[1] = #160000 1'b0;
	INSTRUCAO[1] = #160000 1'b1;
	INSTRUCAO[1] = #80000 1'b0;
	INSTRUCAO[1] = #160000 1'b1;
	INSTRUCAO[1] = #80000 1'b0;
	INSTRUCAO[1] = #80000 1'b1;
end 
// INSTRUCAO[ 0 ]
initial
begin
	repeat(2)
	begin
		INSTRUCAO[0] = 1'b1;
		INSTRUCAO[0] = #80000 1'b0;
		# 80000;
	end
	INSTRUCAO[0] = 1'b1;
	INSTRUCAO[0] = #80000 1'b0;
	INSTRUCAO[0] = #160000 1'b1;
	INSTRUCAO[0] = #80000 1'b0;
	INSTRUCAO[0] = #80000 1'b1;
	INSTRUCAO[0] = #80000 1'b0;
	INSTRUCAO[0] = #80000 1'b1;
end 

// sinalN
initial
begin
	sinalN = 1'b0;
	sinalN = #720000 1'b1;
	sinalN = #80000 1'b0;
end 

// sinalZ
initial
begin
	sinalZ = 1'b0;
	sinalZ = #800000 1'b1;
	sinalZ = #80000 1'b0;
end 
endmodule

