/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 2020  Intel Corporation. All rights reserved.
Your use of Intel Corporation's design tools, logic functions 
and other software and tools, and any partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Intel Program License 
Subscription Agreement, the Intel Quartus Prime License Agreement,
the Intel FPGA IP License Agreement, or other applicable license
agreement, including, without limitation, that your use is for
the sole purpose of programming logic devices manufactured by
Intel and sold by Intel or its authorized distributors.  Please
refer to the applicable agreement for further details, at
https://fpgasoftware.intel.com/eula.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("CLK")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("D0")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 7;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("D0[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "D0";
}

SIGNAL("D0[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "D0";
}

SIGNAL("D0[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "D0";
}

SIGNAL("D0[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "D0";
}

SIGNAL("D0[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "D0";
}

SIGNAL("D0[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "D0";
}

SIGNAL("D0[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "D0";
}

SIGNAL("D1")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 7;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("D1[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "D1";
}

SIGNAL("D1[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "D1";
}

SIGNAL("D1[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "D1";
}

SIGNAL("D1[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "D1";
}

SIGNAL("D1[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "D1";
}

SIGNAL("D1[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "D1";
}

SIGNAL("D1[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "D1";
}

TRANSITION_LIST("CLK")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
			LEVEL 1 FOR 10.0;
			LEVEL 0 FOR 10.0;
		}
	}
}

TRANSITION_LIST("D0[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 4.489;
			LEVEL 1 FOR 21.573;
			LEVEL 0 FOR 20.056;
			LEVEL 1 FOR 41.783;
			LEVEL 0 FOR 18.169;
			LEVEL 1 FOR 119.992;
			LEVEL 0 FOR 20.056;
			LEVEL 1 FOR 19.944;
			LEVEL 0 FOR 20.056;
			LEVEL 1 FOR 59.944;
			LEVEL 0 FOR 20.056;
			LEVEL 1 FOR 41.783;
			LEVEL 0 FOR 18.169;
			LEVEL 1 FOR 119.992;
			LEVEL 0 FOR 20.056;
			LEVEL 1 FOR 19.944;
			LEVEL 0 FOR 20.056;
			LEVEL 1 FOR 59.944;
			LEVEL 0 FOR 20.056;
			LEVEL 1 FOR 41.783;
			LEVEL 0 FOR 18.169;
			LEVEL 1 FOR 119.992;
			LEVEL 0 FOR 20.056;
			LEVEL 1 FOR 19.944;
			LEVEL 0 FOR 20.056;
			LEVEL 1 FOR 59.944;
			LEVEL 0 FOR 13.938;
		}
	}
}

TRANSITION_LIST("D0[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 5.27;
			LEVEL 1 FOR 102.337;
			LEVEL 0 FOR 39.923;
			LEVEL 1 FOR 80.077;
			LEVEL 0 FOR 39.923;
			LEVEL 1 FOR 20.125;
			LEVEL 0 FOR 41.8;
			LEVEL 1 FOR 98.152;
			LEVEL 0 FOR 39.923;
			LEVEL 1 FOR 80.077;
			LEVEL 0 FOR 39.923;
			LEVEL 1 FOR 20.125;
			LEVEL 0 FOR 41.8;
			LEVEL 1 FOR 98.152;
			LEVEL 0 FOR 39.923;
			LEVEL 1 FOR 80.077;
			LEVEL 0 FOR 39.923;
			LEVEL 1 FOR 20.125;
			LEVEL 0 FOR 41.8;
			LEVEL 1 FOR 30.545;
		}
	}
}

TRANSITION_LIST("D0[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 4.131;
			LEVEL 1 FOR 42.633;
			LEVEL 0 FOR 19.483;
			LEVEL 1 FOR 181.874;
			LEVEL 0 FOR 18.126;
			LEVEL 1 FOR 20.036;
			LEVEL 0 FOR 41.905;
			LEVEL 1 FOR 38.576;
			LEVEL 0 FOR 19.483;
			LEVEL 1 FOR 181.874;
			LEVEL 0 FOR 18.126;
			LEVEL 1 FOR 20.036;
			LEVEL 0 FOR 41.905;
			LEVEL 1 FOR 38.576;
			LEVEL 0 FOR 19.483;
			LEVEL 1 FOR 181.874;
			LEVEL 0 FOR 18.126;
			LEVEL 1 FOR 20.036;
			LEVEL 0 FOR 41.905;
			LEVEL 1 FOR 31.812;
		}
	}
}

TRANSITION_LIST("D0[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 5.171;
			LEVEL 1 FOR 21.579;
			LEVEL 0 FOR 20.05;
			LEVEL 1 FOR 41.789;
			LEVEL 0 FOR 18.162;
			LEVEL 1 FOR 39.999;
			LEVEL 0 FOR 21.933;
			LEVEL 1 FOR 38.549;
			LEVEL 0 FOR 19.519;
			LEVEL 1 FOR 79.999;
			LEVEL 0 FOR 20.05;
			LEVEL 1 FOR 19.95;
			LEVEL 0 FOR 20.05;
			LEVEL 1 FOR 41.789;
			LEVEL 0 FOR 18.162;
			LEVEL 1 FOR 39.999;
			LEVEL 0 FOR 21.933;
			LEVEL 1 FOR 38.549;
			LEVEL 0 FOR 19.519;
			LEVEL 1 FOR 79.999;
			LEVEL 0 FOR 20.05;
			LEVEL 1 FOR 19.95;
			LEVEL 0 FOR 20.05;
			LEVEL 1 FOR 41.789;
			LEVEL 0 FOR 18.162;
			LEVEL 1 FOR 39.999;
			LEVEL 0 FOR 21.933;
			LEVEL 1 FOR 38.549;
			LEVEL 0 FOR 19.519;
			LEVEL 1 FOR 79.999;
			LEVEL 0 FOR 20.05;
			LEVEL 1 FOR 19.95;
			LEVEL 0 FOR 13.25;
		}
	}
}

TRANSITION_LIST("D0[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 4.99;
			LEVEL 1 FOR 21.563;
			LEVEL 0 FOR 20.066;
			LEVEL 1 FOR 19.934;
			LEVEL 0 FOR 60.495;
			LEVEL 1 FOR 19.505;
			LEVEL 0 FOR 21.927;
			LEVEL 1 FOR 18.073;
			LEVEL 0 FOR 20.066;
			LEVEL 1 FOR 139.934;
			LEVEL 0 FOR 20.066;
			LEVEL 1 FOR 19.934;
			LEVEL 0 FOR 60.495;
			LEVEL 1 FOR 19.505;
			LEVEL 0 FOR 21.927;
			LEVEL 1 FOR 18.073;
			LEVEL 0 FOR 20.066;
			LEVEL 1 FOR 139.934;
			LEVEL 0 FOR 20.066;
			LEVEL 1 FOR 19.934;
			LEVEL 0 FOR 60.495;
			LEVEL 1 FOR 19.505;
			LEVEL 0 FOR 21.927;
			LEVEL 1 FOR 18.073;
			LEVEL 0 FOR 20.066;
			LEVEL 1 FOR 139.934;
			LEVEL 0 FOR 13.447;
		}
	}
}

TRANSITION_LIST("D0[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 4.96;
			LEVEL 1 FOR 21.595;
			LEVEL 0 FOR 60.577;
			LEVEL 1 FOR 59.423;
			LEVEL 0 FOR 20.034;
			LEVEL 1 FOR 99.966;
			LEVEL 0 FOR 20.034;
			LEVEL 1 FOR 59.966;
			LEVEL 0 FOR 60.577;
			LEVEL 1 FOR 59.423;
			LEVEL 0 FOR 20.034;
			LEVEL 1 FOR 99.966;
			LEVEL 0 FOR 20.034;
			LEVEL 1 FOR 59.966;
			LEVEL 0 FOR 60.577;
			LEVEL 1 FOR 59.423;
			LEVEL 0 FOR 20.034;
			LEVEL 1 FOR 99.966;
			LEVEL 0 FOR 20.034;
			LEVEL 1 FOR 59.966;
			LEVEL 0 FOR 13.445;
		}
	}
}

TRANSITION_LIST("D0[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 4.22;
			LEVEL 0 FOR 42.639;
			LEVEL 1 FOR 99.448;
			LEVEL 0 FOR 23.142;
			LEVEL 1 FOR 78.755;
			LEVEL 0 FOR 18.108;
			LEVEL 1 FOR 63.213;
			LEVEL 0 FOR 37.334;
			LEVEL 1 FOR 99.448;
			LEVEL 0 FOR 23.142;
			LEVEL 1 FOR 78.755;
			LEVEL 0 FOR 18.108;
			LEVEL 1 FOR 63.213;
			LEVEL 0 FOR 37.334;
			LEVEL 1 FOR 99.448;
			LEVEL 0 FOR 23.142;
			LEVEL 1 FOR 78.755;
			LEVEL 0 FOR 18.108;
			LEVEL 1 FOR 63.213;
			LEVEL 0 FOR 30.475;
		}
	}
}

TRANSITION_LIST("D1[6]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 4.72;
			LEVEL 1 FOR 326.33;
			LEVEL 0 FOR 320.077;
			LEVEL 1 FOR 348.873;
		}
	}
}

TRANSITION_LIST("D1[5]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 4.065;
			LEVEL 1 FOR 995.935;
		}
	}
}

TRANSITION_LIST("D1[4]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 4.098;
			LEVEL 1 FOR 647.538;
			LEVEL 0 FOR 318.797;
			LEVEL 1 FOR 29.567;
		}
	}
}

TRANSITION_LIST("D1[3]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 4.397;
			LEVEL 1 FOR 326.303;
			LEVEL 0 FOR 320.104;
			LEVEL 1 FOR 349.196;
		}
	}
}

TRANSITION_LIST("D1[2]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 4.403;
			LEVEL 1 FOR 326.295;
			LEVEL 0 FOR 320.112;
			LEVEL 1 FOR 319.888;
			LEVEL 0 FOR 29.302;
		}
	}
}

TRANSITION_LIST("D1[1]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 4.306;
			LEVEL 1 FOR 326.208;
			LEVEL 0 FOR 669.486;
		}
	}
}

TRANSITION_LIST("D1[0]")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 1;
			LEVEL X FOR 6.02;
			LEVEL 0 FOR 647.397;
			LEVEL 1 FOR 346.583;
		}
	}
}

DISPLAY_LINE
{
	CHANNEL = "CLK";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "D0";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
	CHILDREN = 2, 3, 4, 5, 6, 7, 8;
}

DISPLAY_LINE
{
	CHANNEL = "D0[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "D0[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "D0[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "D0[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "D0[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "D0[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "D0[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "D1";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
	CHILDREN = 10, 11, 12, 13, 14, 15, 16;
}

DISPLAY_LINE
{
	CHANNEL = "D1[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "D1[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "D1[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "D1[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "D1[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "D1[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "D1[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 9;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
