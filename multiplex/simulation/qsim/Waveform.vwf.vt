// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/22/2021 20:51:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          multiplexador
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module multiplexador_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] IN1;
reg [7:0] IN2;
reg S;
// wires                                               
wire [7:0] OUT;

// assign statements (if any)                          
multiplexador i1 (
// port map - connection between master ports and signals/registers   
	.IN1(IN1),
	.IN2(IN2),
	.OUT(OUT),
	.S(S)
);
initial 
begin 
#1000000 $finish;
end 
// IN1[ 7 ]
initial
begin
	IN1[7] = 1'b0;
end 
// IN1[ 6 ]
initial
begin
	IN1[6] = 1'b0;
end 
// IN1[ 5 ]
initial
begin
	IN1[5] = 1'b0;
end 
// IN1[ 4 ]
initial
begin
	IN1[4] = 1'b0;
end 
// IN1[ 3 ]
initial
begin
	IN1[3] = 1'b0;
	IN1[3] = #512000 1'b1;
end 
// IN1[ 2 ]
initial
begin
	IN1[2] = 1'b0;
	IN1[2] = #256000 1'b1;
	IN1[2] = #256000 1'b0;
	IN1[2] = #256000 1'b1;
end 
// IN1[ 1 ]
initial
begin
	repeat(3)
	begin
		IN1[1] = 1'b0;
		IN1[1] = #128000 1'b1;
		# 128000;
	end
	IN1[1] = 1'b0;
	IN1[1] = #128000 1'b1;
end 
// IN1[ 0 ]
initial
begin
	repeat(7)
	begin
		IN1[0] = 1'b0;
		IN1[0] = #64000 1'b1;
		# 64000;
	end
	IN1[0] = 1'b0;
	IN1[0] = #64000 1'b1;
end 
// IN2[ 7 ]
initial
begin
	IN2[7] = 1'b0;
end 
// IN2[ 6 ]
initial
begin
	IN2[6] = 1'b0;
end 
// IN2[ 5 ]
initial
begin
	IN2[5] = 1'b0;
end 
// IN2[ 4 ]
initial
begin
	IN2[4] = 1'b0;
	IN2[4] = #960000 1'b1;
end 
// IN2[ 3 ]
initial
begin
	IN2[3] = 1'b0;
	IN2[3] = #448000 1'b1;
	IN2[3] = #512000 1'b0;
end 
// IN2[ 2 ]
initial
begin
	IN2[2] = 1'b0;
	IN2[2] = #192000 1'b1;
	IN2[2] = #256000 1'b0;
	IN2[2] = #256000 1'b1;
	IN2[2] = #256000 1'b0;
end 
// IN2[ 1 ]
initial
begin
	IN2[1] = 1'b0;
	# 64000;
	repeat(3)
	begin
		IN2[1] = 1'b1;
		IN2[1] = #128000 1'b0;
		# 128000;
	end
	IN2[1] = 1'b1;
	IN2[1] = #128000 1'b0;
end 
// IN2[ 0 ]
initial
begin
	repeat(7)
	begin
		IN2[0] = 1'b1;
		IN2[0] = #64000 1'b0;
		# 64000;
	end
	IN2[0] = 1'b1;
	IN2[0] = #64000 1'b0;
end 

// S
initial
begin
	repeat(7)
	begin
		S = 1'b0;
		S = #64000 1'b1;
		# 64000;
	end
	S = 1'b0;
	S = #64000 1'b1;
end 
endmodule

