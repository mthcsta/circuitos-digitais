// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/24/2021 01:59:07"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          neander
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module neander_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [7:0] read;
// wires                                               
wire cargaRI;
wire [2:0] CONTADOR;
wire [7:0] dataAC;
wire [7:0] dataPC;
wire [7:0] dataRDMr;
wire [7:0] dataREM;
wire [7:0] dataRI;
wire LOG_gotot0;
wire LOG_HALT;
wire LOG_IncPC;
wire sinalWrite;
wire [7:0] write;

// assign statements (if any)                          
neander i1 (
// port map - connection between master ports and signals/registers   
	.cargaRI(cargaRI),
	.CLK(CLK),
	.CONTADOR(CONTADOR),
	.dataAC(dataAC),
	.dataPC(dataPC),
	.dataRDMr(dataRDMr),
	.dataREM(dataREM),
	.dataRI(dataRI),
	.LOG_gotot0(LOG_gotot0),
	.LOG_HALT(LOG_HALT),
	.LOG_IncPC(LOG_IncPC),
	.read(read),
	.sinalWrite(sinalWrite),
	.write(write)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
initial
begin
	CLK = 1'b1;
	# 5000;
	repeat(99)
	begin
		CLK = 1'b0;
		CLK = #5000 1'b1;
		# 5000;
	end
	CLK = 1'b0;
end 
// read[ 7 ]
initial
begin
	read[7] = 1'b0;
	read[7] = #40000 1'b1;
	read[7] = #10000 1'b0;
end 
// read[ 6 ]
initial
begin
	read[6] = 1'b0;
end 
// read[ 5 ]
initial
begin
	read[5] = 1'b1;
	read[5] = #50000 1'b0;
	read[5] = #110000 1'b1;
	read[5] = #80000 1'b0;
end 
// read[ 4 ]
initial
begin
	read[4] = 1'b0;
	read[4] = #160000 1'b1;
	read[4] = #80000 1'b0;
end 
// read[ 3 ]
initial
begin
	read[3] = 1'b0;
end 
// read[ 2 ]
initial
begin
	read[2] = 1'b0;
	read[2] = #50000 1'b1;
	read[2] = #40000 1'b0;
end 
// read[ 1 ]
initial
begin
	read[1] = 1'b0;
	read[1] = #90000 1'b1;
	read[1] = #70000 1'b0;
end 
// read[ 0 ]
initial
begin
	read[0] = 1'b0;
	read[0] = #240000 1'b1;
	read[0] = #80000 1'b0;
end 
endmodule

